import { Button } from "../../components/ui/Button";
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from "../../components/ui/DiaLog";
import { Input } from "../../components/ui/Input";
import { Label } from "../../components/ui/Label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../../components/ui/Select";
import { zodResolver } from "../../../node_modules/@hookform/resolvers/zod";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import useToast from "../../hooks/use-toast";
import { uploadImage } from "../../services/Upload.Service";

const imageSchema = z.object({
  imagE_NAME: z.string().min(1, { message: "Vui lòng chọn hình ảnh." }),
  producT_ID: z.number().min(1, { message: "ID sản phẩm không hợp lệ." }),
  imagE_STATUS: z.enum(["ACTIVE", "INACTIVE"], { message: "Vui lòng chọn trạng thái hợp lệ." }),
});

const ImageForm = ({ isOpen, onClose, onSave, productId }) => {
  const { toast } = useToast();
  const [formData, setFormData] = useState({
    id: 0, // Placeholder, can be generated by backend
    imagE_NAME: "",
    producT_ID: productId || 0,
    imagE_STATUS: "ACTIVE",
    imagePreview: "",
  });

  const form = useForm({
    resolver: zodResolver(imageSchema),
    defaultValues: {
      imagE_NAME: "",
      producT_ID: productId || 0,
      imagE_STATUS: "ACTIVE",
    },
  });

  const handleFileChange = async (e) => {
    const file = e.target.files?.[0];
    if (file) {
      if (!file.type.startsWith("image/")) {
        toast({
          title: "Lỗi",
          description: "Vui lòng chọn file hình ảnh (jpg, png, v.v.).",
          variant: "destructive",
        });
        return;
      }
      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData((prev) => ({ ...prev, imagePreview: reader.result }));
      };
      reader.readAsDataURL(file);

      try {
        const res = await uploadImage(file);
        setFormData((prev) => ({ ...prev, imagE_NAME: res.imageUrl }));
        form.setValue("imagE_NAME", res.imageUrl);
      } catch (err) {
        toast({
          title: "Lỗi",
          description: "Upload hình ảnh thất bại.",
          variant: "destructive",
        });
        console.error("Upload thất bại:", err);
      }
    }
  };

  const handleSelectChange = (value) => {
    setFormData((prev) => ({ ...prev, imagE_STATUS: value }));
    form.setValue("imagE_STATUS", value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const isValid = await form.trigger();
    if (!isValid) {
      toast({
        title: "Lỗi",
        description: "Vui lòng kiểm tra lại các trường dữ liệu.",
        variant: "destructive",
      });
      return;
    }
    onSave({
      id: formData.id,
      imagE_NAME: formData.imagE_NAME,
      producT_ID: formData.producT_ID,
      imagE_STATUS: formData.imagE_STATUS,
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Thêm hình ảnh cho sản phẩm</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="producT_ID" className="text-right">ID sản phẩm</Label>
              <Input
                id="producT_ID"
                name="producT_ID"
                value={formData.producT_ID}
                disabled
                className="col-span-3"
                {...form.register("producT_ID", { valueAsNumber: true })}
              />
              {form.formState.errors.producT_ID && (
                <p className="text-red-500 text-sm col-span-3 col-start-2">
                  {form.formState.errors.producT_ID.message}
                </p>
              )}
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label className="text-right">Hình ảnh</Label>
              <input
                type="file"
                accept="image/*"
                onChange={handleFileChange}
                className="col-span-3"
              />
              {form.formState.errors.imagE_NAME && (
                <p className="text-red-500 text-sm col-span-3 col-start-2">
                  {form.formState.errors.imagE_NAME.message}
                </p>
              )}
            </div>

            {formData.imagePreview && (
              <div className="grid grid-cols-4 items-center gap-4">
                <Label className="text-right">Xem trước</Label>
                <img src={formData.imagePreview} alt="Preview" className="col-span-3 max-h-32 object-contain" />
              </div>
            )}

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="imagE_STATUS" className="text-right">Trạng thái</Label>
              <Select
                value={formData.imagE_STATUS}
                onValueChange={handleSelectChange}
                {...form.register("imagE_STATUS")}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Chọn trạng thái" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="ACTIVE">Hiển thị</SelectItem>
                  <SelectItem value="INACTIVE">Ẩn</SelectItem>
                </SelectContent>
              </Select>
              {form.formState.errors.imagE_STATUS && (
                <p className="text-red-500 text-sm col-span-3 col-start-2">
                  {form.formState.errors.imagE_STATUS.message}
                </p>
              )}
            </div>
          </div>

          <DialogFooter>
            <Button type="button" variant="outline" onClick={onClose}>Hủy</Button>
            <Button type="submit">Lưu</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default ImageForm;